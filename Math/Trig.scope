import "Math/Core";

namespace Math;

/%
The result of @"PI" / 180. 
%/
const dec DEG_TO_RAD = 0.017453292519943;

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the sin of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `0.0`.
%/
func dec sin(dec x) {
	ret cos(x - PI / 2.0);
}

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the cosine of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `-1.0`.
%/
func dec cos(dec x) {
	// Special cases
	
	if (x == infinity) {
		ret infinity;
	}
	
	if (x == -infinity) {
		ret -infinity;
	}
	
	// The Taylor series below is only accurate between -3 and 3.
	// Transform x to fit in the range.
	// Since cosine is a periodic function, we can just keep x between
	// -PI and PI.
	
	while (x > PI) {
		x -= 2.0 * PI;
	}
	
	while (x < 0.0 - PI) {
		x += 2.0 * PI;
	}
	
	// More special cases
	
	if (x == 0.0) {
		ret 0.0;
	}
	
	// Taylor series
	
	// cos(x) = 1 - (x^2 / 2!) + (x^4 / 4!) - (x^6 / 6!) + ...
	dec seriesSum = 0.0;
	dec factorial = 1.0;
	for (int k : 0..24 step 1) {
		dec numerator = 1.0;
		if (k % 2 != 0) {
			numerator = -1.0;
		}
		
		// Rippling factorial
		// Don't recalculate it every loop, just use the last value.
		if (k != 0) {
			dec kd = k -> dec;
			factorial *= 2.0 * kd - 1.0;
			factorial *= 2.0 * kd;
		}

		dec a = numerator / factorial;
		dec b = powInt(x, 2 * k);

		seriesSum += a * b;
	}
	
	// Finally, return
	
	ret seriesSum;
}

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the tanget of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `0.0`.
%/
func dec tan(dec x) {	
	ret sin(x) / cos(x);
}

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the cosecant of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `0.0`.
%/
func dec csc(dec x) {
	ret 1.0 / sin(x);
}

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the secant of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `0.0`.
%/
func dec sec(dec x) {
	ret 1.0 / cos(x);
}

/%
@approx: This function uses the Taylor series expansion of cosine. This function
	is not 100% accurate but will provide a very good approximation.

Computes the cotangent of @"x" (in radians).

Please note that an input of @"PI" **will not** return *exactly* `0.0`.
%/
func dec cot(dec x) {
	ret 1.0 / tan(x);
}

/%
Returns @"degrees" converted into radians.
%/
func dec degToRad(dec degrees) {
	ret degrees * DEG_TO_RAD;
}

/%
Returns @"radians" converted into degrees.
%/
func dec radToDeg(dec radians) {
	ret radians / DEG_TO_RAD;
}